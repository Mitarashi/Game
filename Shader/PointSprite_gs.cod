//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer ConstantBuffer
// {
//
//   float4x4 view;                     // Offset:    0 Size:    64
//   float4x4 projection;               // Offset:   64 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ConstantBuffer                    cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   x  w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
//
gs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[8], immediateIndexed
dcl_input v[1][0].xyz
dcl_input v[1][1].xyz
dcl_input v[1][2].xy
dcl_input v[1][3].xyzw
dcl_temps 6
dcl_indexableTemp x0[4], 4
dcl_indexableTemp x1[4], 4
dcl_inputprimitive point 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_maxout 4
//
// Initial variable locations:
//   m0 <- particleStream; 
//   v[0][0].x <- input[0].Position.x; v[0][0].y <- input[0].Position.y; v[0][0].z <- input[0].Position.z; 
//   v[0][1].x <- input[0].Normal.x; v[0][1].y <- input[0].Normal.y; v[0][1].z <- input[0].Normal.z; 
//   v[0][2].x <- input[0].Size.x; v[0][2].y <- input[0].Size.y; 
//   v[0][3].x <- input[0].Color.x; v[0][3].y <- input[0].Color.y; v[0][3].z <- input[0].Color.z; v[0][3].w <- input[0].Color.w; 
//   x0 <- Positions; x1 <- texturePositions
//
#line 7 "D:\Game-master\HLSL\PointSprite_gs.hlsl"
mul r0.xyzw, cb0[0].xyzw, v[0][0].xxxx
mul r1.xyzw, cb0[1].xyzw, v[0][0].yyyy
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[2].xyzw, v[0][0].zzzz
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[3].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- Position.x; r0.y <- Position.y; r0.z <- Position.z; r0.w <- Position.w

#line 9
mov r1.x, v[0][2].x  // r1.x <- width

#line 10
mov r2.y, v[0][2].y  // r2.y <- height

#line 11
ftou r3.x, v[0][3].x  // r3.x <- type

#line 12
mov r3.y, l(4)
udiv null, r3.y, r3.x, r3.y
utof r3.y, r3.y
mul r4.y, r3.y, l(0.250000)  // r4.y <- u

#line 13
mov r3.y, l(4)
udiv r3.x, null, r3.x, r3.y
utof r3.x, r3.x
mul r4.z, r3.x, l(0.250000)  // r4.z <- v

#line 15
mov r2.x, -r1.x
itof r2.zw, l(0, 0, 0, 0)
add r3.xyzw, r0.xyzw, r2.xyzw
itof r1.zw, l(0, 0, 0, 0)
mov r1.y, r2.y
add r2.xyzw, r0.xyzw, r1.xyzw
mov r5.x, -r1.x
mov r5.y, -r1.y
itof r5.zw, l(0, 0, 0, 0)
add r5.xyzw, r0.xyzw, r5.xyzw
mov r1.y, -r1.y
itof r1.zw, l(0, 0, 0, 0)
add r0.xyzw, r0.xyzw, r1.xyzw
mov x0[0].xyzw, r3.xyzw
mov x0[1].xyzw, r2.xyzw
mov x0[2].xyzw, r5.xyzw
mov x0[3].xyzw, r0.xyzw

#line 23
add r4.x, r4.y, l(0.250000)
add r4.w, r4.z, l(0.250000)
add r0.x, r4.y, l(0.250000)
add r0.y, r4.z, l(0.250000)
mov x1[0].xy, r4.yzyy
mov x1[1].xy, r4.xzxx
mov x1[2].xy, r4.ywyy
mov x1[3].xy, r0.xyxx

#line 31
mov r0.x, l(0)  // r0.x <- i
mov r0.y, r0.x  // r0.y <- i
loop 
  ilt r0.z, r0.y, l(4)
  breakc_z r0.z

#line 34
  itof r1.xyz, l(1, 1, 1, 0)  // r1.x <- output.Color.x; r1.y <- output.Color.y; r1.z <- output.Color.z
  mov r1.w, v[0][3].w  // r1.w <- output.Color.w

#line 35
  mov r2.xyzw, x0[r0.y + 0].xyzw
  mul r3.xyzw, r2.xxxx, cb0[4].xyzw
  mul r4.xyzw, r2.yyyy, cb0[5].xyzw
  add r3.xyzw, r3.xyzw, r4.xyzw
  mul r4.xyzw, r2.zzzz, cb0[6].xyzw
  add r3.xyzw, r3.xyzw, r4.xyzw
  mul r2.xyzw, r2.wwww, cb0[7].xyzw
  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- output.Position.x; r2.y <- output.Position.y; r2.z <- output.Position.z; r2.w <- output.Position.w

#line 36
  mov r0.zw, x1[r0.y + 0].xxxy  // r0.z <- output.Texcoord.x; r0.w <- output.Texcoord.y

#line 37
  mov o0.xyzw, r2.xyzw
  mov o1.xy, r0.zwzz
  mov o2.xyzw, r1.xyzw
  emit_stream m0

#line 38
  iadd r0.y, r0.y, l(1)
endloop 

#line 40
cut_stream m0

#line 41
ret 
// Approximately 67 instruction slots used
