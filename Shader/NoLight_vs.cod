//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 lightDirection;             // Offset:   64 Size:    16 [unused]
//
// }
//
// cbuffer CbMesh
// {
//
//   row_major float4x4 boneTransforms[128];// Offset:    0 Size:  8192
//
// }
//
// cbuffer CbSubset
// {
//
//   float4 materialColor;              // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CbScene                           cbuffer      NA          NA            cb0      1 
// CbMesh                            cbuffer      NA          NA            cb1      1 
// CbSubset                          cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float       
// TANGENT                  0   xyz         2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float       
// WEIGHTS                  0   xyzw        5     NONE   float   xyzw
// BONES                    0   xyzw        6     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB1[512], dynamicIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_input v0.xyzw
dcl_input v3.xy
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
//   v1.x <- input.normal.x; v1.y <- input.normal.y; v1.z <- input.normal.z; 
//   v2.x <- input.tangent.x; v2.y <- input.tangent.y; v2.z <- input.tangent.z; 
//   v3.x <- input.texcoord.x; v3.y <- input.texcoord.y; 
//   v4.x <- input.color.x; v4.y <- input.color.y; v4.z <- input.color.z; v4.w <- input.color.w; 
//   v5.x <- input.boneWeights.x; v5.y <- input.boneWeights.y; v5.z <- input.boneWeights.z; v5.w <- input.boneWeights.w; 
//   v6.x <- input.boneIndices.x; v6.y <- input.boneIndices.y; v6.z <- input.boneIndices.z; v6.w <- input.boneIndices.w; 
//   o2.x <- <main return value>.color.x; o2.y <- <main return value>.color.y; o2.z <- <main return value>.color.z; o2.w <- <main return value>.color.w; 
//   o1.x <- <main return value>.texcoord.x; o1.y <- <main return value>.texcoord.y; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 8 "D:\Game-master\HLSL\NoLight_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- position.x; r0.y <- position.y; r0.z <- position.z

#line 10
mov r0.w, l(0)  // r0.w <- i
mov r1.xyz, r0.xyzx  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.x, r1.w, l(4)
  breakc_z r2.x

#line 12
  dp4 r2.x, v5.xyzw, icb[r1.w + 0].xyzw
  and r3.xyzw, v6.xyzw, icb[r1.w + 4].xyzw
  or r2.yz, r3.yywy, r3.xxzx
  or r2.y, r2.z, r2.y
  imul null, r2.y, r2.y, l(4)
  mul r3.xyz, v0.xxxx, cb1[r2.y + 0].xyzx
  mul r4.xyz, v0.yyyy, cb1[r2.y + 1].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, v0.zzzz, cb1[r2.y + 2].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r2.yzw, v0.wwww, cb1[r2.y + 3].xxyz
  add r2.yzw, r2.yyzw, r3.xxyz
  mul r2.xyz, r2.yzwy, r2.xxxx
  add r1.xyz, r1.xyzx, r2.xyzx

#line 14
  iadd r1.w, r1.w, l(1)
endloop 

#line 16
mul r0.xyzw, r1.xxxx, cb0[0].xyzw
mul r2.xyzw, r1.yyyy, cb0[1].xyzw
add r0.xyzw, r0.xyzw, r2.xyzw
mul r1.xyzw, r1.zzzz, cb0[2].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[3].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- output.position.x; r0.y <- output.position.y; r0.z <- output.position.z; r0.w <- output.position.w

#line 17
mov r1.xy, v3.xyxx  // r1.x <- output.texcoord.x; r1.y <- output.texcoord.y

#line 18
mov r2.xyzw, cb2[0].xyzw  // r2.x <- output.color.x; r2.y <- output.color.y; r2.z <- output.color.z; r2.w <- output.color.w

#line 19
mov o0.xyzw, r0.xyzw
mov o2.xyzw, r2.xyzw
mov o1.xy, r1.xyxx
ret 
// Approximately 36 instruction slots used
